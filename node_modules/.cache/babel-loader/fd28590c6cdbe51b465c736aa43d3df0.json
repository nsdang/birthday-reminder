{"ast":null,"code":"import _slicedToArray from \"/Users/anhnguyen/Desktop/GitHub/Projects/TimeMatcher/birthday-reminder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/anhnguyen/Desktop/GitHub/Projects/TimeMatcher/birthday-reminder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/anhnguyen/Desktop/GitHub/Projects/TimeMatcher/birthday-reminder/src/views/Profile/Connections.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport _ from 'lodash';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport { Avatar, Button, Card, CardContent, CardHeader, Divider, Input, List, ListItem, ListItemAvatar, ListItemText, Snackbar, Typography, colors } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport CheckIcon from '@material-ui/icons/Check';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport axios from 'src/utils/axios';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {},\n    content: {\n      paddingTop: 0\n    },\n    search: {\n      padding: theme.spacing(2, 3),\n      display: 'flex',\n      alignItems: 'center'\n    },\n    searchIcon: {\n      color: theme.palette.text.secondary\n    },\n    searchInput: {\n      marginLeft: theme.spacing(1),\n      color: theme.palette.text.secondary,\n      fontSize: '14px'\n    },\n    avatar: {\n      height: 60,\n      width: 60\n    },\n    listItem: {\n      flexWrap: 'wrap'\n    },\n    listItemText: {\n      marginLeft: theme.spacing(2)\n    },\n    connectButton: {\n      marginLeft: 'auto'\n    },\n    pendingButton: {\n      marginLeft: 'auto',\n      color: theme.palette.common.white,\n      backgroundColor: colors.orange[600],\n      '&:hover': {\n        backgroundColor: colors.orange[900]\n      }\n    },\n    connectedButton: {\n      marginLeft: 'auto',\n      color: theme.palette.common.white,\n      backgroundColor: colors.green[600],\n      '&:hover': {\n        backgroundColor: colors.green[900]\n      }\n    },\n    buttonIcon: {\n      marginRight: theme.spacing(1)\n    }\n  };\n});\n\nfunction Connections(_ref) {\n  var _this = this;\n\n  var className = _ref.className,\n      rest = _objectWithoutProperties(_ref, [\"className\"]);\n\n  var classes = useStyles();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      openSnackbar = _useState2[0],\n      setOpenSnackbar = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      connections = _useState4[0],\n      setConnections = _useState4[1];\n\n  var handleConnectToggle = function handleConnectToggle(id) {\n    setConnections(function (prevConnections) {\n      var newConnections = _.map(prevConnections, _.clone);\n\n      return newConnections.map(function (connection) {\n        if (connection.id === id) {\n          connection.status = connection.status === 'connected' || connection.status === 'pending' ? 'not_connected' : 'pending';\n\n          if (connection.status === 'pending') {\n            setOpenSnackbar(true);\n          }\n        }\n\n        return connection;\n      });\n    });\n  };\n\n  var handleSnackbarClose = function handleSnackbarClose() {\n    setOpenSnackbar(false);\n  };\n\n  useEffect(function () {\n    var mounted = true;\n\n    var fetchConnections = function fetchConnections() {\n      axios.get('/api/users/1/connections').then(function (response) {\n        if (mounted) {\n          setConnections(response.data.connections);\n        }\n      });\n    };\n\n    fetchConnections();\n    return function () {\n      mounted = false;\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(CardHeader, {\n    title: \"Connections\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SearchIcon, {\n    className: classes.searchIcon,\n    color: \"inherit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    className: classes.searchInput,\n    disableUnderline: true,\n    placeholder: \"Search people & places\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    className: classes.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    disablePadding: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }, connections.map(function (connection, i) {\n    return /*#__PURE__*/React.createElement(ListItem, {\n      className: classes.listItem,\n      disableGutters: true,\n      divider: i < connections.length - 1,\n      key: connection.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ListItemAvatar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Avatar, {\n      alt: \"Profile image\",\n      className: classes.avatar,\n      component: RouterLink,\n      src: connection.avatar,\n      to: \"/profile/1/timeline\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(ListItemText, {\n      className: classes.listItemText,\n      primary: connection.name,\n      secondary: \"\".concat(connection.common, \" connections in common\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }\n    }), connection.status === 'not_connected' && /*#__PURE__*/React.createElement(Button, {\n      className: classes.connectButton,\n      onClick: function onClick() {\n        return handleConnectToggle(connection.id);\n      },\n      size: \"small\",\n      variant: \"contained\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(PersonAddIcon, {\n      className: classes.buttonIcon,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }\n    }), \"Connect\"), connection.status === 'pending' && /*#__PURE__*/React.createElement(Button, {\n      className: classes.pendingButton,\n      onClick: function onClick() {\n        return handleConnectToggle(connection.id);\n      },\n      size: \"small\",\n      variant: \"contained\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(PersonAddIcon, {\n      className: classes.buttonIcon,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }\n    }), \"Pending\"), connection.status === 'connected' && /*#__PURE__*/React.createElement(Button, {\n      className: classes.connectedButton,\n      onClick: function onClick() {\n        return handleConnectToggle(connection.id);\n      },\n      size: \"small\",\n      variant: \"contained\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(CheckIcon, {\n      className: classes.buttonIcon,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }\n    }), \"Connected\"));\n  })))), /*#__PURE__*/React.createElement(Snackbar, {\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'left'\n    },\n    autoHideDuration: 6000,\n    message: /*#__PURE__*/React.createElement(Typography, {\n      color: \"inherit\",\n      variant: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }\n    }, \"Sent connection request\"),\n    onClose: handleSnackbarClose,\n    open: openSnackbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }));\n}\n\nConnections.propTypes = {\n  className: PropTypes.string\n};\nexport default Connections;","map":{"version":3,"sources":["/Users/anhnguyen/Desktop/GitHub/Projects/TimeMatcher/birthday-reminder/src/views/Profile/Connections.js"],"names":["React","useState","useEffect","Link","RouterLink","PropTypes","clsx","_","PerfectScrollbar","makeStyles","Avatar","Button","Card","CardContent","CardHeader","Divider","Input","List","ListItem","ListItemAvatar","ListItemText","Snackbar","Typography","colors","SearchIcon","CheckIcon","PersonAddIcon","axios","useStyles","theme","root","content","paddingTop","search","padding","spacing","display","alignItems","searchIcon","color","palette","text","secondary","searchInput","marginLeft","fontSize","avatar","height","width","listItem","flexWrap","listItemText","connectButton","pendingButton","common","white","backgroundColor","orange","connectedButton","green","buttonIcon","marginRight","Connections","className","rest","classes","openSnackbar","setOpenSnackbar","connections","setConnections","handleConnectToggle","id","prevConnections","newConnections","map","clone","connection","status","handleSnackbarClose","mounted","fetchConnections","get","then","response","data","i","length","name","vertical","horizontal","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport _ from 'lodash';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Avatar,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  Input,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Snackbar,\n  Typography,\n  colors\n} from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport CheckIcon from '@material-ui/icons/Check';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport axios from 'src/utils/axios';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  content: {\n    paddingTop: 0\n  },\n  search: {\n    padding: theme.spacing(2, 3),\n    display: 'flex',\n    alignItems: 'center'\n  },\n  searchIcon: {\n    color: theme.palette.text.secondary\n  },\n  searchInput: {\n    marginLeft: theme.spacing(1),\n    color: theme.palette.text.secondary,\n    fontSize: '14px'\n  },\n  avatar: {\n    height: 60,\n    width: 60\n  },\n  listItem: {\n    flexWrap: 'wrap'\n  },\n  listItemText: {\n    marginLeft: theme.spacing(2)\n  },\n  connectButton: {\n    marginLeft: 'auto'\n  },\n  pendingButton: {\n    marginLeft: 'auto',\n    color: theme.palette.common.white,\n    backgroundColor: colors.orange[600],\n    '&:hover': {\n      backgroundColor: colors.orange[900]\n    }\n  },\n  connectedButton: {\n    marginLeft: 'auto',\n    color: theme.palette.common.white,\n    backgroundColor: colors.green[600],\n    '&:hover': {\n      backgroundColor: colors.green[900]\n    }\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1)\n  }\n}));\n\nfunction Connections({ className, ...rest }) {\n  const classes = useStyles();\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  const [connections, setConnections] = useState([]);\n\n  const handleConnectToggle = (id) => {\n    setConnections((prevConnections) => {\n      const newConnections = _.map(prevConnections, _.clone);\n\n      return newConnections.map((connection) => {\n        if (connection.id === id) {\n          connection.status = connection.status === 'connected' || connection.status === 'pending'\n            ? 'not_connected'\n            : 'pending';\n\n          if (connection.status === 'pending') {\n            setOpenSnackbar(true);\n          }\n        }\n\n        return connection;\n      });\n    });\n  };\n\n  const handleSnackbarClose = () => {\n    setOpenSnackbar(false);\n  };\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchConnections = () => {\n      axios.get('/api/users/1/connections').then((response) => {\n        if (mounted) {\n          setConnections(response.data.connections);\n        }\n      });\n    };\n\n    fetchConnections();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Connections\" />\n      <Divider />\n      <div className={classes.search}>\n        <SearchIcon\n          className={classes.searchIcon}\n          color=\"inherit\"\n        />\n        <Input\n          className={classes.searchInput}\n          disableUnderline\n          placeholder=\"Search people &amp; places\"\n        />\n      </div>\n      <Divider />\n      <CardContent className={classes.content}>\n        <PerfectScrollbar>\n          <List disablePadding>\n            {connections.map((connection, i) => (\n              <ListItem\n                className={classes.listItem}\n                disableGutters\n                divider={i < connections.length - 1}\n                key={connection.id}\n              >\n                <ListItemAvatar>\n                  <Avatar\n                    alt=\"Profile image\"\n                    className={classes.avatar}\n                    component={RouterLink}\n                    src={connection.avatar}\n                    to=\"/profile/1/timeline\"\n                  />\n                </ListItemAvatar>\n                <ListItemText\n                  className={classes.listItemText}\n                  primary={connection.name}\n                  secondary={`${connection.common} connections in common`}\n                />\n                {connection.status === 'not_connected' && (\n                  <Button\n                    className={classes.connectButton}\n                    onClick={() => handleConnectToggle(connection.id)}\n                    size=\"small\"\n                    variant=\"contained\"\n                  >\n                    <PersonAddIcon className={classes.buttonIcon} />\n                    Connect\n                  </Button>\n                )}\n                {connection.status === 'pending' && (\n                  <Button\n                    className={classes.pendingButton}\n                    onClick={() => handleConnectToggle(connection.id)}\n                    size=\"small\"\n                    variant=\"contained\"\n                  >\n                    <PersonAddIcon className={classes.buttonIcon} />\n                    Pending\n                  </Button>\n                )}\n                {connection.status === 'connected' && (\n                  <Button\n                    className={classes.connectedButton}\n                    onClick={() => handleConnectToggle(connection.id)}\n                    size=\"small\"\n                    variant=\"contained\"\n                  >\n                    <CheckIcon className={classes.buttonIcon} />\n                    Connected\n                  </Button>\n                )}\n              </ListItem>\n            ))}\n          </List>\n        </PerfectScrollbar>\n      </CardContent>\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left'\n        }}\n        autoHideDuration={6000}\n        message={(\n          <Typography\n            color=\"inherit\"\n            variant=\"h6\"\n          >\n            Sent connection request\n          </Typography>\n        )}\n        onClose={handleSnackbarClose}\n        open={openSnackbar}\n      />\n    </Card>\n  );\n}\n\nConnections.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Connections;\n"]},"metadata":{},"sourceType":"module"}