{"ast":null,"code":"import _slicedToArray from \"/Users/anhnguyen/Desktop/GitHub/Projects/TimeMatcher/birthday-reminder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/anhnguyen/Desktop/GitHub/Projects/TimeMatcher/birthday-reminder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/anhnguyen/Desktop/GitHub/Projects/TimeMatcher/birthday-reminder/src/views/CustomerManagementDetails/Logs.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport { Card, CardHeader, CardContent, Divider, Typography, Table, TableBody, TableCell, TableRow, colors } from '@material-ui/core';\nimport axios from 'src/utils/axios';\nimport Label from 'src/components/Label';\nvar useStyles = makeStyles(function () {\n  return {\n    root: {},\n    content: {\n      padding: 0\n    },\n    inner: {\n      minWidth: 1150\n    },\n    methodCell: {\n      width: 100\n    },\n    statusCell: {\n      width: 64\n    }\n  };\n});\n\nfunction Logs(_ref) {\n  var _this = this;\n\n  var className = _ref.className,\n      rest = _objectWithoutProperties(_ref, [\"className\"]);\n\n  var classes = useStyles();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      logs = _useState2[0],\n      setLogs = _useState2[1];\n\n  useEffect(function () {\n    var mounted = true;\n\n    var fetchLogs = function fetchLogs() {\n      axios.get('/api/management/customers/1/logs').then(function (response) {\n        if (mounted) {\n          setLogs(response.data.logs);\n        }\n      });\n    };\n\n    fetchLogs();\n    return function () {\n      mounted = false;\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    title: \"Customer logs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    className: classes.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n    options: {\n      suppressScrollY: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.inner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, logs.map(function (log) {\n    return /*#__PURE__*/React.createElement(TableRow, {\n      key: log.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      className: classes.methodCell,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }\n    }, log.method)), /*#__PURE__*/React.createElement(TableCell, {\n      className: classes.statusCell,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      color: log.status === 200 ? colors.green[600] : colors.red[600],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }\n    }, log.status)), /*#__PURE__*/React.createElement(TableCell, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 23\n      }\n    }, log.route), /*#__PURE__*/React.createElement(TableCell, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 23\n      }\n    }, log.desc), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 23\n      }\n    }, log.IP), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 23\n      }\n    }, moment(log.created_at).format('YYYY/MM/DD | hh:mm:ss')));\n  }))))))));\n}\n\nLogs.propTypes = {\n  className: PropTypes.string\n};\nexport default Logs;","map":{"version":3,"sources":["/Users/anhnguyen/Desktop/GitHub/Projects/TimeMatcher/birthday-reminder/src/views/CustomerManagementDetails/Logs.js"],"names":["React","useState","useEffect","PropTypes","clsx","moment","PerfectScrollbar","makeStyles","Card","CardHeader","CardContent","Divider","Typography","Table","TableBody","TableCell","TableRow","colors","axios","Label","useStyles","root","content","padding","inner","minWidth","methodCell","width","statusCell","Logs","className","rest","classes","logs","setLogs","mounted","fetchLogs","get","then","response","data","suppressScrollY","map","log","id","method","status","green","red","route","desc","IP","created_at","format","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Divider,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  colors\n} from '@material-ui/core';\nimport axios from 'src/utils/axios';\nimport Label from 'src/components/Label';\n\nconst useStyles = makeStyles(() => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 1150\n  },\n  methodCell: {\n    width: 100\n  },\n  statusCell: {\n    width: 64\n  }\n}));\n\nfunction Logs({ className, ...rest }) {\n  const classes = useStyles();\n  const [logs, setLogs] = useState([]);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchLogs = () => {\n      axios.get('/api/management/customers/1/logs').then(response => {\n        if (mounted) {\n          setLogs(response.data.logs);\n        }\n      });\n    }\n\n    fetchLogs();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Card>\n        <CardHeader title=\"Customer logs\" />\n        <Divider />\n        <CardContent className={classes.content}>\n          <PerfectScrollbar options={{ suppressScrollY: true }}>\n            <div className={classes.inner}>\n              <Table>\n                <TableBody>\n                  {logs.map(log => (\n                    <TableRow key={log.id}>\n                      <TableCell className={classes.methodCell}>\n                        <Typography variant=\"h6\">{log.method}</Typography>\n                      </TableCell>\n                      <TableCell className={classes.statusCell}>\n                        <Label\n                          color={\n                            log.status === 200\n                              ? colors.green[600]\n                              : colors.red[600]\n                          }\n                        >\n                          {log.status}\n                        </Label>\n                      </TableCell>\n                      <TableCell>{log.route}</TableCell>\n                      <TableCell>{log.desc}</TableCell>\n                      <TableCell align=\"right\">{log.IP}</TableCell>\n                      <TableCell align=\"right\">\n                        {moment(log.created_at).format('YYYY/MM/DD | hh:mm:ss')}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </PerfectScrollbar>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nLogs.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Logs;\n"]},"metadata":{},"sourceType":"module"}