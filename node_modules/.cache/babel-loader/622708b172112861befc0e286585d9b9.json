{"ast":null,"code":"import _toConsumableArray from \"/Users/anhnguyen/Desktop/GitHub/Projects/TimeMatcher/birthday-reminder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/anhnguyen/Desktop/GitHub/Projects/TimeMatcher/birthday-reminder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/anhnguyen/Desktop/GitHub/Projects/TimeMatcher/birthday-reminder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/anhnguyen/Desktop/GitHub/Projects/TimeMatcher/birthday-reminder/src/views/Mail/EmailList/index.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Divider, List } from '@material-ui/core';\nimport EmailToolbar from './EmailToolbar';\nimport EmailItem from './EmailItem';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      height: '100%',\n      backgroundColor: theme.palette.common.white,\n      overflow: 'hidden'\n    }\n  };\n});\n\nfunction EmailList(_ref) {\n  var _this = this;\n\n  var emails = _ref.emails,\n      onEmailOpen = _ref.onEmailOpen,\n      onBack = _ref.onBack,\n      className = _ref.className,\n      rest = _objectWithoutProperties(_ref, [\"emails\", \"onEmailOpen\", \"onBack\", \"className\"]);\n\n  var classes = useStyles();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedEmails = _useState2[0],\n      setSelectedEmails = _useState2[1];\n\n  var handleSelectAll = function handleSelectAll() {\n    setSelectedEmails(emails.map(function (email) {\n      return email.id;\n    }));\n  };\n\n  var handleDeselectAll = function handleDeselectAll() {\n    setSelectedEmails([]);\n  };\n\n  var handleToggleOne = function handleToggleOne(id) {\n    setSelectedEmails(function (prevSelectedEmails) {\n      var newSelectedEmails = _toConsumableArray(prevSelectedEmails);\n\n      if (newSelectedEmails.includes(id)) {\n        return newSelectedEmails.filter(function (email) {\n          return email !== id;\n        });\n      }\n\n      newSelectedEmails.push(id);\n      return newSelectedEmails;\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(EmailToolbar, {\n    onBack: onBack,\n    onDeselectAll: handleDeselectAll,\n    onSelectAll: handleSelectAll,\n    selectedEmails: selectedEmails,\n    totalEmails: emails.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(List, {\n    disablePadding: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, emails.map(function (email) {\n    return /*#__PURE__*/React.createElement(EmailItem, {\n      email: email,\n      key: email.id,\n      onOpen: onEmailOpen,\n      onToggle: function onToggle() {\n        return handleToggleOne(email.id);\n      },\n      selected: selectedEmails.includes(email.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    });\n  })));\n}\n\nEmailList.propTypes = {\n  className: PropTypes.string,\n  emails: PropTypes.array.isRequired,\n  onBack: PropTypes.func,\n  onEmailOpen: PropTypes.func\n};\nexport default EmailList;","map":{"version":3,"sources":["/Users/anhnguyen/Desktop/GitHub/Projects/TimeMatcher/birthday-reminder/src/views/Mail/EmailList/index.js"],"names":["React","useState","PropTypes","clsx","makeStyles","Divider","List","EmailToolbar","EmailItem","useStyles","theme","root","height","backgroundColor","palette","common","white","overflow","EmailList","emails","onEmailOpen","onBack","className","rest","classes","selectedEmails","setSelectedEmails","handleSelectAll","map","email","id","handleDeselectAll","handleToggleOne","prevSelectedEmails","newSelectedEmails","includes","filter","push","length","propTypes","string","array","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Divider, List } from '@material-ui/core';\nimport EmailToolbar from './EmailToolbar';\nimport EmailItem from './EmailItem';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100%',\n    backgroundColor: theme.palette.common.white,\n    overflow: 'hidden'\n  }\n}));\n\nfunction EmailList({\n  emails,\n  onEmailOpen,\n  onBack,\n  className,\n  ...rest\n}) {\n  const classes = useStyles();\n  const [selectedEmails, setSelectedEmails] = useState([]);\n\n  const handleSelectAll = () => {\n    setSelectedEmails(emails.map((email) => email.id));\n  };\n\n  const handleDeselectAll = () => {\n    setSelectedEmails([]);\n  };\n\n  const handleToggleOne = (id) => {\n    setSelectedEmails((prevSelectedEmails) => {\n      const newSelectedEmails = [...prevSelectedEmails];\n\n      if (newSelectedEmails.includes(id)) {\n        return newSelectedEmails.filter((email) => email !== id);\n      }\n      newSelectedEmails.push(id);\n\n      return newSelectedEmails;\n    });\n  };\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <EmailToolbar\n        onBack={onBack}\n        onDeselectAll={handleDeselectAll}\n        onSelectAll={handleSelectAll}\n        selectedEmails={selectedEmails}\n        totalEmails={emails.length}\n      />\n      <Divider />\n      <List disablePadding>\n        {emails.map((email) => (\n          <EmailItem\n            email={email}\n            key={email.id}\n            onOpen={onEmailOpen}\n            onToggle={() => handleToggleOne(email.id)}\n            selected={selectedEmails.includes(email.id)}\n          />\n        ))}\n      </List>\n    </div>\n  );\n}\n\nEmailList.propTypes = {\n  className: PropTypes.string,\n  emails: PropTypes.array.isRequired,\n  onBack: PropTypes.func,\n  onEmailOpen: PropTypes.func\n};\n\nexport default EmailList;\n"]},"metadata":{},"sourceType":"module"}