{"ast":null,"code":"import _slicedToArray from \"/Users/anhnguyen/Desktop/GitHub/Projects/TimeMatcher/birthday-reminder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/anhnguyen/Desktop/GitHub/Projects/TimeMatcher/birthday-reminder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/anhnguyen/Desktop/GitHub/Projects/TimeMatcher/birthday-reminder/src/views/ProjectList/Results.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Button, Grid, Menu, MenuItem, ListItemText, Typography } from '@material-ui/core';\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport axios from 'src/utils/axios';\nimport Paginate from 'src/components/Paginate';\nimport ProjectCard from 'src/components/ProjectCard';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {},\n    header: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      flexWrap: 'wrap',\n      marginBottom: theme.spacing(2)\n    },\n    title: {\n      position: 'relative',\n      '&:after': {\n        position: 'absolute',\n        bottom: -8,\n        left: 0,\n        content: '\" \"',\n        height: 3,\n        width: 48,\n        backgroundColor: theme.palette.primary.main\n      }\n    },\n    actions: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    sortButton: {\n      textTransform: 'none',\n      letterSpacing: 0,\n      marginRight: theme.spacing(2)\n    },\n    paginate: {\n      marginTop: theme.spacing(3),\n      display: 'flex',\n      justifyContent: 'center'\n    }\n  };\n});\n\nfunction Projects(_ref) {\n  var _this = this;\n\n  var className = _ref.className,\n      rest = _objectWithoutProperties(_ref, [\"className\"]);\n\n  var classes = useStyles();\n  var sortRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      openSort = _useState2[0],\n      setOpenSort = _useState2[1];\n\n  var _useState3 = useState('Most popular'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedSort = _useState4[0],\n      setSelectedSort = _useState4[1];\n\n  var _useState5 = useState('grid'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mode = _useState6[0],\n      setMode = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      projects = _useState8[0],\n      setProjects = _useState8[1];\n\n  var handleSortOpen = function handleSortOpen() {\n    setOpenSort(true);\n  };\n\n  var handleSortClose = function handleSortClose() {\n    setOpenSort(false);\n  };\n\n  var handleSortSelect = function handleSortSelect(value) {\n    setSelectedSort(value);\n    setOpenSort(false);\n  };\n\n  var handleModeChange = function handleModeChange(event, value) {\n    setMode(value);\n  };\n\n  useEffect(function () {\n    var mounted = true;\n\n    var fetchProjects = function fetchProjects() {\n      axios.get('/api/projects').then(function (response) {\n        if (mounted) {\n          setProjects(response.data.projects);\n        }\n      });\n    };\n\n    fetchProjects();\n    return function () {\n      mounted = false;\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, \"Showing\", ' ', projects.length, ' ', \"projects\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.actions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: classes.sortButton,\n    onClick: handleSortOpen,\n    ref: sortRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, selectedSort, /*#__PURE__*/React.createElement(ArrowDropDownIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n    exclusive: true,\n    onChange: handleModeChange,\n    size: \"small\",\n    value: mode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ViewModuleIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, projects.map(function (project) {\n    return /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      key: project.id,\n      md: mode === 'grid' ? 4 : 12,\n      sm: mode === 'grid' ? 6 : 12,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ProjectCard, {\n      project: project,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Paginate, {\n    pageCount: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Menu, {\n    anchorEl: sortRef.current,\n    className: classes.menu,\n    onClose: handleSortClose,\n    open: openSort,\n    elevation: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, ['Most recent', 'Popular', 'Price high', 'Price low', 'On sale'].map(function (option) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      className: classes.menuItem,\n      key: option,\n      onClick: function onClick() {\n        return handleSortSelect(option);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListItemText, {\n      primary: option,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 15\n      }\n    }));\n  })));\n}\n\nProjects.propTypes = {\n  className: PropTypes.string\n};\nexport default Projects;","map":{"version":3,"sources":["/Users/anhnguyen/Desktop/GitHub/Projects/TimeMatcher/birthday-reminder/src/views/ProjectList/Results.js"],"names":["React","useState","useRef","useEffect","PropTypes","clsx","makeStyles","Button","Grid","Menu","MenuItem","ListItemText","Typography","ToggleButtonGroup","ToggleButton","ViewModuleIcon","ArrowDropDownIcon","axios","Paginate","ProjectCard","useStyles","theme","root","header","display","alignItems","justifyContent","flexWrap","marginBottom","spacing","title","position","bottom","left","content","height","width","backgroundColor","palette","primary","main","actions","sortButton","textTransform","letterSpacing","marginRight","paginate","marginTop","Projects","className","rest","classes","sortRef","openSort","setOpenSort","selectedSort","setSelectedSort","mode","setMode","projects","setProjects","handleSortOpen","handleSortClose","handleSortSelect","value","handleModeChange","event","mounted","fetchProjects","get","then","response","data","length","map","project","id","current","menu","option","menuItem","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Button,\n  Grid,\n  Menu,\n  MenuItem,\n  ListItemText,\n  Typography\n} from '@material-ui/core';\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport axios from 'src/utils/axios';\nimport Paginate from 'src/components/Paginate';\nimport ProjectCard from 'src/components/ProjectCard';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  header: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    flexWrap: 'wrap',\n    marginBottom: theme.spacing(2)\n  },\n  title: {\n    position: 'relative',\n    '&:after': {\n      position: 'absolute',\n      bottom: -8,\n      left: 0,\n      content: '\" \"',\n      height: 3,\n      width: 48,\n      backgroundColor: theme.palette.primary.main\n    }\n  },\n  actions: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  sortButton: {\n    textTransform: 'none',\n    letterSpacing: 0,\n    marginRight: theme.spacing(2)\n  },\n  paginate: {\n    marginTop: theme.spacing(3),\n    display: 'flex',\n    justifyContent: 'center'\n  }\n}));\n\nfunction Projects({ className, ...rest }) {\n  const classes = useStyles();\n  const sortRef = useRef(null);\n  const [openSort, setOpenSort] = useState(false);\n  const [selectedSort, setSelectedSort] = useState('Most popular');\n  const [mode, setMode] = useState('grid');\n  const [projects, setProjects] = useState([]);\n\n  const handleSortOpen = () => {\n    setOpenSort(true);\n  };\n\n  const handleSortClose = () => {\n    setOpenSort(false);\n  };\n\n  const handleSortSelect = (value) => {\n    setSelectedSort(value);\n    setOpenSort(false);\n  };\n\n  const handleModeChange = (event, value) => {\n    setMode(value);\n  };\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchProjects = () => {\n      axios.get('/api/projects').then((response) => {\n        if (mounted) {\n          setProjects(response.data.projects);\n        }\n      });\n    };\n\n    fetchProjects();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <div className={classes.header}>\n        <Typography\n          className={classes.title}\n          variant=\"h5\"\n        >\n          Showing\n          {' '}\n          {projects.length}\n          {' '}\n          projects\n        </Typography>\n        <div className={classes.actions}>\n          <Button\n            className={classes.sortButton}\n            onClick={handleSortOpen}\n            ref={sortRef}\n          >\n            {selectedSort}\n            <ArrowDropDownIcon />\n          </Button>\n          <ToggleButtonGroup\n            exclusive\n            onChange={handleModeChange}\n            size=\"small\"\n            value={mode}\n          >\n            <ToggleButton value=\"grid\">\n              <ViewModuleIcon />\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n      </div>\n      <Grid\n        container\n        spacing={3}\n      >\n        {projects.map((project) => (\n          <Grid\n            item\n            key={project.id}\n            md={mode === 'grid' ? 4 : 12}\n            sm={mode === 'grid' ? 6 : 12}\n            xs={12}\n          >\n            <ProjectCard project={project} />\n          </Grid>\n        ))}\n      </Grid>\n      <div className={classes.paginate}>\n        <Paginate pageCount={3} />\n      </div>\n      <Menu\n        anchorEl={sortRef.current}\n        className={classes.menu}\n        onClose={handleSortClose}\n        open={openSort}\n        elevation={1}\n      >\n        {['Most recent', 'Popular', 'Price high', 'Price low', 'On sale'].map(\n          (option) => (\n            <MenuItem\n              className={classes.menuItem}\n              key={option}\n              onClick={() => handleSortSelect(option)}\n            >\n              <ListItemText primary={option} />\n            </MenuItem>\n          )\n        )}\n      </Menu>\n    </div>\n  );\n}\n\nProjects.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Projects;\n"]},"metadata":{},"sourceType":"module"}